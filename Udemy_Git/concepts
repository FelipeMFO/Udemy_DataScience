States:

	-Untracked (Não monitorado)
		-> Original File
	-Modified (Modificado)
		-> When it's modified
	-Staged (Preparado)
		-> When it's added by git add
		Git maintains an area where the files added stay until the commit
	-Commited (Consolidado)
		-> After the commit, it's registered on the repo


Adding images to README:

	!<file path>(<description>)
	E.G. : ![./stages.png](States) 


Diff:
	git diff HEAD~<n> #Compare the different commits, n is the nth last commit


Collaborators:

	People who can push into your repository, otherwise, people can only fork.

Checkout:

	Seeing how a specific file or all the repository were at a certain commit
	git checkout <commit> <file>
	This <commit> can be the first digits of the commit code that you can see at git log


	git checkout -- <path_or_file>
		-> Desfaz todas as alterações que não estejam no Stage (quando deu add) desde o último commit

	git checkout HEAD -- <path_or_file> 			git checkout HEAD~n #undo to the nth last commit
		-> Desfaz todas as alterações desde o último commit incluindo o Stage


Reset:
	
	git reset <commit>
		-> Reset the repo to a certain commit
	
	git reset -- hard <commit>
		-> Reset and remove all the alterations, it's like you've erased that commit

	O --soft é o padrão que pega as alterações e deixa como está, já o --hard além de apagar o commit vai voltar pro estado do commit anterior


Revert:

	git revert <commit>
		-> Make a new commit undoing all the alterations from the specified commit
		-> Useful for undoing an old commit

Branch:

	-> It's a list of commits
	git branch -> Shows which branch you are
	git branch <new_branch> #creates a new branch
	git branch -d <branch> #delete a branch

	Use the command checkout to change to a branch. E a partir desse momento os commits vão ser jogados nessa branch e não na Master
	

Merge:
	-> Aplica os commits de uma branch na branch atual, caso existam commits na branch atual que não estão na outra será criado um commit de merge (verificando conflitos e etc)

	git merge <outra_branch> #Estando na branch atual (na master por exemplo)

Rebase:
	-> Ele rebaseia a linha de commits, funciona como um merge mas ao invés de na linha do projeto juntar ambas as branchs com um commit de merge (em paralelo), ele serializa os commits. Continua acionando os conflitos.
	-> Útil usar quando não foram feitas muitas mudanças nos mesmos arquivos entre as duas branchs.
	-> Antes pode se ver uma branch solta. Caso vá para a master (por ex) e de rebase, depois do push, os commits da branch solta aparecem na branch master.

Fetch:
	git fetch
	-> Baixa as atualizações do repositório remote porém não aplica elas no repositório 
	-> Pull = Fetch + Merge. Já da o Merge automaticamente, fazer Fetch e Rebase é melhor pois mantem o histórico do desenvolvimento. (Vai ter vários commits atrasados e mais as modificações, ai o Rebase conserva os commits).
	-> Permite fazer o rebase de uma branch ao invés de um merge.

Tag:
	-> A Tag guarda o estado do repositório naquele ponto, é útil pra definier versões estáveis do projeto.

Fork:
	-> Vocé copia o repositório de outro usuário para o seu usuário no GitHub
	-> Semelhante a Branch porém não recebe mais commits.

Git Ignore:

	.gitignore

		.extension

		folder1/
		folder2/
		
		**/*.extension # Any extension coming from any path

Git Stash: 	

	-> Guarda as alterações do Working Directory
	-> Permite fazer rebase, merge, trocar de branch sem a necessidade de commitar.

	git stash list
	git stash pop # Aplica o último stash armazenado

	-> Evitar ficar usando stash em cima de stash, mesmo que se possa fazer.

Git Cherrypick:

	git cherrypick <commit>

	-> Aplica as alterações de um commit na branch atual
	-> Cria um novo commit com essas alterações
	-> Pode ser um bug fix descober em uma versão x+n que vai ser aplicada na versão x.

Git Blame:

	-> Mostra as alterações feitas em um arquivo linha por linha.
	-> Mostra o autor e o commit em que foi feito aquela linha.

	git blame <file>

Git Bisect: 
	
	-> Entra em um modo onde faz uma busca binária pra identificar alguma diferença entre commits e depois identifica qual commit fez isso. Ver sintaxe.
